// ==UserScript==
// @name         TISK - Text Insert Short-Keys Automation (Firefox and Chrome Version)
// @namespace    *://*/*
// @description  Expands user-defined Short-Keys sequences into full phrases when typing based on your own shortcuts or a converted script from the AutoHotkey
// @version      1.0.4
// @author       Dawid Pintal
// @copyright    Copyright (c) 2025 Dawid Pintal
// @license      MIT
// @match        *://*/*
// @grant        none
// ==/UserScript==

/*
    MIT License.
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.

    Note from the author:
    This script automation is free to use in home and work for your needs, but code, idea and UI/UX solutions here are proprietary and intended solely for internal usage.
    Unauthorized use, copying, modification, distribution, or disclosure outside the permitted environment is prohibited without written permission of Dawid Pintal.

    Contact: dmpintal@yahoo.com
    Created: June 30, 2025
    Last updated: Jul 12, 2025

    Includes:
    ---------
    - Automatic replacement of the defined sequence of characters with a text string in any form including multi-line.
    - Compatibility with Firefox, Chrome and most standard web tools, forms and editing fields.
    - Tool available in any corner offering to paste sequence along with the dynamic search filter for drop-down list.
    - Auto-extendable search filter field for larger and multi-lines sequences -> µEditor, with resizing point.
    - Hide/show toggle button as it is in every modern solution.
    - Full positioning tool for page corners with simple buttons.
    - Short-Keys grouping that allows you to create categories or multi-language shortcuts.
    - Memorize the position, selected group and hidden state of the tool when refreshing pages.
    - Optional dynamic tags like dynamic Date Stamp by country `%DateStamp%`, dynamic hour `%TimeStamp%`, website url `%URL%`, your name '%USERNAME%'
    - World-class internationalization, e.g. Date Stamp.
    - Trigger short-keys sequences after space or enter key at the end.
    - Websites list to be disabled for TISK UI show.
    - Some additional bugs fixed.

    NOTE:
    -----
    In addition, with the script delivered fast and efficient AutoHotkey script converter created in Excel to help you use your standard .ahk files here.
    Problems with AHK still exist in 2.x and Windows 11 versions, but TISK is now going its own way, no longer a replacement or rival to AutoHotkey but an alternative
    depending on what and how you prefer to use it. Thanks to the AutoHotkey Team for their inspiration, work and support during problems.

    Security and data protection:
    -----------------------------
    Your short keys are saved only for you, nothing from this script is shared outside - this is Tampermonkey.
    The code blocks generated by Excel workbook available in this package is pasted by you locally and there is no way
    for anyone to “see it outside” - only you use it for your fast typing and you can change it any time you want.
    Tampermonkey is not able to modify anything by itself, on your drive and system, just helping you in type.
*/

const VERSION = "1.0.4";
const DEBUG_INFO = false;

const groups = ["pl", "fr"];

const blockedDomains = [
    "messenger.com",
    "facebook.com"
];

const shortcuts = {
    "`hi": "Dear Customer,\n\n",
    "`ty": "Thank you for contacting me regarding my product.\n\n",
    "`sign": "Best Regards,\nDawid Pintal\nCustomer Support - World\n",
    "`pl_hi": "Szanowny Kliencie,\n\n",
    "`pl_ty": "Dziękuję za skontaktowanie się w sprawie mojego produktu.\n\n",
    "`pl_sign": "Serdecznie pozdrawiam,\nDawid Pintal\nWsparcie Klienta - Świat\n",
    "`fr_hi": "Cher client,\n\n",
    "`fr_ty": "Merci de m'avoir contacté au sujet de mon produit.\n\n",
    "`fr_sign": "Salutations distinguées,\nDawid Pintal\nCustomer Support - World\n",
    "`ts": "Now is the hour %TimeStamp%.",
    "`ds": "Today is %DateStamp%.",
    "`pl_ts": "Teraz mamy godzinę %TimeStamp%.",
    "`pl_ds": "Dzisiaj mamy dzień %DateStamp%.",
    "`fr_ts": "C'est l'heure %TimeStamp%.",
    "`fr_ds": "Nous sommes aujourd'hui le %DateStamp%."
};

let currentGroup = localStorage.getItem("tisk-group")?.trim().toLowerCase() || '';

async function applyDynamicTags(text) {
    const now = new Date();

    const group = typeof currentGroup === "string" && currentGroup.trim().length === 2
        ? currentGroup.toLowerCase()
        : "en";

    const localeMap = {
        // EUROPE
        pl: "pl-PL", // Polish
        fr: "fr-FR", // French
        de: "de-DE", // German
        es: "es-ES", // Spanish (Spain)
        it: "it-IT", // Italian
        pt: "pt-PT", // Portuguese (Portugal)
        nl: "nl-NL", // Dutch
        cs: "cs-CZ", // Czech
        sk: "sk-SK", // Slovak
        ro: "ro-RO", // Romanian
        hu: "hu-HU", // Hungarian
        bg: "bg-BG", // Bulgarian
        el: "el-GR", // Greek
        ru: "ru-RU", // Russian
        uk: "uk-UA", // Ukrainian
        tr: "tr-TR", // Turkish
        sr: "sr-RS", // Serbian
        hr: "hr-HR", // Croatian
        lt: "lt-LT", // Lithuanian
        lv: "lv-LV", // Latvian
        et: "et-EE", // Estonian

        // AMERICAS
        en: "en-US", // English (USA default fallback)

        // ASIA
        zh: "zh-CN", // Chinese (Simplified)
        ja: "ja-JP", // Japanese
        ko: "ko-KR", // Korean
        hi: "hi-IN", // Hindi (India)
        th: "th-TH", // Thai
        vi: "vi-VN", // Vietnamese
        id: "id-ID", // Indonesian
        ta: "ta-IN", // Tamil

        // MIDDLE EAST
        ar: "ar-SA", // Arabic (Saudi Arabia)
        fa: "fa-IR", // Persian (Iran)
        he: "he-IL" // Hebrew (Israel)
    };

    const locale = localeMap[group] || "en-US";

    const replacements = {
        "%DateStamp%": now.toLocaleDateString(locale, { year: 'numeric', month: 'long', day: 'numeric' }),
        "%TimeStamp%": now.toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' }),
        "%URL%": window.location.href,
        "%UserName%": navigator.userAgent.includes("Windows") ? "Dawid Pintal" : ""
    };

    for (const tag in replacements) {
        text = text.replaceAll(tag, replacements[tag]);
    }

    return text;
}

function tmLog(...args) { if (DEBUG_INFO) console.log('TM>', ...args); }

document.addEventListener('input', async function (e) {
    const el = e.target;
    if (!el || !(el instanceof HTMLInputElement || el instanceof HTMLTextAreaElement || el.isContentEditable)) return;

    const cursorPos = el.selectionStart;
    const text = el.value;
    if (!text) return;

    for (const key in shortcuts) {
        const keyLen = key.length;
        const end = el.selectionStart;
        if (!end) return;
        if (end < keyLen + 1) continue;

        const start = end - keyLen - 1;
        let typed = text.substring(start, end);
        tmLog("typed substring(start, end) = `" + typed + "`" );

        // Build the expected key for this shortcut
        let expectedKey = currentGroup + key;
        if (currentGroup && currentGroup.trim() !== "") {
            const connector = typed[0];
            typed = connector + currentGroup + "_" + typed.substring(1);
            expectedKey = connector + currentGroup + "_" + key.substring(1);
            tmLog("Modification typed/expectedKey for group `" + currentGroup + "`: typed = " + JSON.stringify(typed) + " expectedKey = " + JSON.stringify(expectedKey));
        }

        tmLog("  User typed (json): " + JSON.stringify(typed) );
        tmLog("  Trying key: `" + key + "` expectedKey = " + JSON.stringify(expectedKey));
        tmLog("  Logic with: space = " + (typed === expectedKey + " ") + " enter = " + (typed === expectedKey + "\n"));

        if (typed === expectedKey + " " || typed === expectedKey + "\n") {
            tmLog("✅ MATCHED KEY: " + expectedKey);

            const before = text.substring(0, start);
            const after = text.substring(end);
            const replacement = await applyDynamicTags(shortcuts[expectedKey]);

            el.value = before + replacement + after;

            const newPos = before.length + replacement.length;
            el.setSelectionRange(newPos, newPos);
            break;
        }
    }
});

(function () {
    // TISK Main Panel Interface
    // Complete menu-button automation tool UI, available shortcuts list, search filter, info alert, hide/unhide and positioning buttons also group field
    //
    'use strict';

    const currentHost = window.location.hostname.toLowerCase();

    // Check if domain matches any blocked
    if (blockedDomains.some(domain => currentHost.includes(domain))) {
        tmLog("Domain `" + currentHost + "` is blocked, skipping UI.");
        return;
    }

    if (window.top !== window.self) return;
    if (document.getElementById("tampermonkey-text-menu")) return;

    let lastFocusedElement = null;

    document.addEventListener('focusin', function (e) {
        if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target.isContentEditable) {
            lastFocusedElement = e.target;
        }
    });

    // SHORT-KEYS MAIN PANEL
    const wrapper = document.createElement('div');
    wrapper.id = "tm-shortcut-panel";
    wrapper.style.cssText = `
        position: fixed;
        bottom: 10px;
        right: 60px;
        z-index: 999999;
        background: #f0f8ff;
        padding: 8px 10px 10px 10px;
        border-radius: 8px;
        box-shadow: 2px 2px 6px rgba(0,0,0,0.2);
        max-width: 300px;
        font-family: Arial, sans-serif;
        transition: transform 0.3s ease, opacity 0.3s ease;
    `;

    // INFO BUTTON (ⓘ)
    const infoButton = document.createElement('div');
    infoButton.textContent = "ⓘ";
    infoButton.title = "About this Automation";
    infoButton.style.cssText = `
        position: fixed;
        bottom: 60px;
        right: 10px;
        width: 35px;
        height: 35px;
        background: #B4C7E7;
        color: #1F4E78;
        font-size: 26px;
        font-weight: normal;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        text-align: center;
        line-height: 35px;
        cursor: pointer;
        z-index: 1000000;
        transition: background 0.3s ease;
    `;
    infoButton.addEventListener('mouseover', () => { infoButton.style.background = "#D9E1F2"; });
    infoButton.addEventListener('mouseout', () => { infoButton.style.background = "#B4C7E7"; });

    // POSITION TOGGLE BUTTONS (↔ and ↕)
    const posV = document.createElement('div');
    const posH = document.createElement('div');
    posV.title = "Switch Top/Bottom";
    posH.title = "Switch Left/Right";

    // POSITION BUTTONS (⬍ and ⬌)
    posV.style.cssText = `
        position: static;
        width: 18px;
        height: 18px;
        background: #FFDAB9;
        color: black;
        font-size: 12px;
        font-weight: normal;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        text-align: center;
        line-height: 16px;
        cursor: pointer;
        z-index: 1000000;
        transition: background 0.3s ease;
    `;

    posH.style.cssText = `
        position: static;
        width: 18px;
        height: 18px;
        background: #FFE699;
        color: black;
        font-size: 12px;
        font-weight: normal;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        text-align: center;
        line-height: 16px;
        cursor: pointer;
        z-index: 1000000;
        transition: background 0.3s ease;
    `;

    function updatePosition() {
        const corner = localStorage.getItem("tm-corner") || "bottom-right";
        wrapper.style.top = "";
        wrapper.style.bottom = "";
        wrapper.style.left = "";
        wrapper.style.right = "";

        toggle.style.top = "";
        toggle.style.bottom = "";
        toggle.style.left = "";
        toggle.style.right = "";

        infoButton.style.top = "";
        infoButton.style.bottom = "";
        infoButton.style.left = "";
        infoButton.style.right = "";

        posH.style.top = "";
        posH.style.bottom = "";
        posH.style.left = "";
        posH.style.right = "";

        posV.style.top = "";
        posV.style.bottom = "";
        posV.style.left = "";
        posV.style.right = "";

        const isTop = corner.startsWith("top");
        const isLeft = corner.endsWith("left");

        const v = isTop ? "top" : "bottom";
        const h = isLeft ? "left" : "right";

        wrapper.style[v] = "10px";
        wrapper.style[h] = "60px";

        toggle.style[v] = "14px";
        toggle.style[h] = "10px";

        infoButton.style[v] = "60px";
        infoButton.style[h] = "10px";

        posH.style[v] = "110px";
        posH.style[h] = "10px";

        posV.style[v] = "160px";
        posV.style[h] = "10px";

        positionWrapper.style.top = "";
        positionWrapper.style.bottom = "";
        positionWrapper.style.left = "";
        positionWrapper.style.right = "";

        positionWrapper.style[v] = "106px";
        positionWrapper.style[h] = "10px";
    }

    posH.addEventListener('click', () => {
        let corner = localStorage.getItem("tm-corner") || "bottom-right";
        corner = corner.endsWith("left") ? corner.replace("left", "right") : corner.replace("right", "left");
        localStorage.setItem("tm-corner", corner);
        updatePosition();
    });

    posV.addEventListener('click', () => {
        let corner = localStorage.getItem("tm-corner") || "bottom-right";
        corner = corner.startsWith("top") ? corner.replace("top", "bottom") : corner.replace("bottom", "top");
        localStorage.setItem("tm-corner", corner);
        updatePosition();
    });

    // TOGGLE BUTTON (▶ / ◀)
    const toggle = document.createElement('div');
    toggle.textContent = "▶";
    toggle.title = "Toggle Shortcut Panel";
    toggle.style.cssText = `
        position: fixed;
        bottom: 14px;
        right: 10px;
        width: 35px;
        height: 35px;
        background: #FFD966;
        color: black;
        font-size: 16px;
        font-weight: bold;
        border-radius: 50%;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
        text-align: center;
        line-height: 35px;
        cursor: pointer;
        z-index: 1000000;
        transition: background 0.3s ease;
    `;
    toggle.addEventListener('mouseover', () => { toggle.style.background = "#FFE599"; });
    toggle.addEventListener('mouseout', () => { toggle.style.background = "#FFD966"; });

    // STACK ORDER & INITIAL POSITION (AFTER toggle is defined)
    posV.textContent = "↕";
    posH.textContent = "↔";

    // All aligned vertically (from bottom up)
    toggle.style.right = "10px";
    toggle.style.bottom = "14px";

    infoButton.style.right = "10px";
    infoButton.style.bottom = "60px";

    let isVisible = localStorage.getItem("tm-panel-visible") !== "false";
    toggle.addEventListener('click', () => {
        isVisible = !isVisible;
        localStorage.setItem("tm-panel-visible", isVisible);
        if (isVisible) {
            wrapper.style.transform = "translateX(0)";
            wrapper.style.opacity = "1";
            wrapper.style.pointerEvents = "auto";
            toggle.textContent = "▶";
        } else {
            wrapper.style.transform = "translateX(320px)";
            wrapper.style.opacity = "0";
            wrapper.style.pointerEvents = "none";
            toggle.textContent = "◀";
        }
    });

    // FILTER/SEARCH INPUT FIELD
    const filterInput = document.createElement('textarea');
    filterInput.rows = 1;
    filterInput.wrap = 'soft';
    filterInput.placeholder = 'Filter shortcuts by any phrase...';
    filterInput.style.cssText = `
        width: 100%;
        min-height: 28px;
        box-sizing: border-box;
        margin-bottom: 6px;
        padding: 6px 8px;
        font-size: 12px;
        border-radius: 4px;
        border: 1px solid #ccc;
        background-color: #FFF2CC;
        color: black;
        resize: vertical;
        line-height: 1.3;
        font-family: inherit;
    `;
    wrapper.appendChild(filterInput);

    filterInput.addEventListener('input', async () => {
        const val = filterInput.value;

        for (const key in shortcuts) {
            const trigger1 = key + ' ';
            const trigger2 = key + '\n';
            if (val.endsWith(trigger1) || val.endsWith(trigger2)) {
                const before = val.slice(0, val.length - key.length - 1);
                const expanded = await applyDynamicTags(shortcuts[key]);
                filterInput.value = before + expanded;

                // Force resize after content is set
                setTimeout(() => {
                    const lines = (filterInput.value.match(/\n/g) || []).length + 1;
                    filterInput.rows = Math.min(10, lines);
                }, 10); // Small delay to let DOM update before resizing

                break;
            }
        }

        updateMenuFilter(filterInput.value);

        // Shrink back if empty
        if (filterInput.value.trim() === "") {
            filterInput.rows = 1;
        }
    });

    filterInput.addEventListener('keydown', (e) => {
        const isCtrlX = e.ctrlKey && e.key === 'x';
        const isCtrlDelete = e.ctrlKey && (e.key === 'Backspace' || e.key === 'Delete');
        const isCtrlA = e.ctrlKey && e.key === 'a';

        if ((isCtrlX || isCtrlDelete || isCtrlA) && filterInput.value.trim().length <= 1) {
            setTimeout(() => {
                filterInput.rows = 3;
            }, 100);
        }
    });

    // DROPDOWN MENU
    const menu = document.createElement('select');
    menu.id = "tampermonkey-text-menu";
    menu.style.cssText = `
        width: 100%;
        font-size: 12px;
        padding: 4px;
        border-radius: 4px;
        background-color: #ADD8E6;
        border: 1px solid #4F94CD;
        color: black !important;
        cursor: pointer;
    `;

    const defaultOption = document.createElement('option');
    defaultOption.text = "Insert from My Short-Keys Library...";
    defaultOption.disabled = true;
    defaultOption.selected = true;
    menu.appendChild(defaultOption);

    wrapper.appendChild(menu);

    // FOOTER WITH GROUP FIELD INSIDE
    const footer = document.createElement('div');
        footer.style.cssText = `
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 10px;
        color: #888;
        margin-top: 6px;
        padding-top: 4px;
        border-top: 1px solid #ddd;
    `;

    // (LEFT SIDE) group selector
    const groupWrapper = document.createElement('div');
    groupWrapper.style.cssText = `
        display: flex;
        align-items: center;
        gap: 6px;
    `;
    const groupLabel = document.createElement('span');
    groupLabel.textContent = "Group:";
    groupLabel.style.cssText = "font-size: 10px; color: #555;";

    const groupInput = document.createElement('input');
    groupInput.type = "text";
    groupInput.placeholder = "Group";
    groupInput.id = "group_selector";
    groupInput.value = localStorage.getItem("tisk-group") || "";
    groupInput.style.cssText = `
        width: 48px;
        background: #FFF2CC;
        color: black;
        border: 1px solid #aaa;
        padding: 2px 4px;
        font-size: 10px;
        border-radius: 3px;
        text-align: center;
    `;
    groupInput.addEventListener('input', () => {
        currentGroup = groupInput.value.trim().toLowerCase();
        localStorage.setItem("tisk-group", currentGroup);
    });

    // GROUP DROP-DOWN MENU
    const groupDropdown = document.createElement("select");
    groupDropdown.style.cssText = `
        font-size: 12px;
        padding: 2px 4px;
        border-radius: 3px;
        border: 1px solid #aaa;
        background: #D9EAD3;
        color: black;
        width: auto;
    `;
    const blankOption = document.createElement("option");
    blankOption.textContent = "▼";
    blankOption.disabled = true;
    blankOption.selected = true;
    groupDropdown.appendChild(blankOption);

    for (const group of groups) {
        const opt = document.createElement("option");
        opt.value = group;
        opt.textContent = group;
        groupDropdown.appendChild(opt);
    }

    groupDropdown.addEventListener("change", function () {
        const selected = this.value;
        groupInput.value = selected;
        currentGroup = selected;
        localStorage.setItem("tisk-group", selected);
    });

    groupWrapper.appendChild(groupLabel);
    groupWrapper.appendChild(groupInput);
    groupWrapper.appendChild(groupDropdown);

    // (RIGHT SIDE) version label
    const versionLabel = document.createElement('div');
    versionLabel.textContent = "TISK " + VERSION + " (c) 2025 D. Pintal";
    versionLabel.style.cssText = "font-size: 10px; color: #888;";

    footer.appendChild(groupWrapper);
    footer.appendChild(versionLabel);
    wrapper.appendChild(footer);

    if (!isVisible) {
        wrapper.style.transform = "translateX(320px)";
        wrapper.style.opacity = "0";
        wrapper.style.pointerEvents = "none";
        toggle.textContent = "◀";
    }

    // Insert into website body
    document.body.appendChild(wrapper);
    document.body.appendChild(toggle);
    document.body.appendChild(infoButton);

    const positionWrapper = document.createElement('div');
    positionWrapper.style.cssText = `
        position: fixed;
        z-index: 1000000;
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
        align-items: center;
        gap: 6px;
        right: 10px;
        bottom: 106px;
    `;
    positionWrapper.appendChild(posV);
    positionWrapper.appendChild(posH);
    document.body.appendChild(positionWrapper);

    // INFO DIALOG BOX
    const modal = document.createElement('div');
    modal.style.cssText = `
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border: 2px solid #888;
        padding: 20px;
        border-radius: 10px;
        max-width: 560px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        z-index: 1000001;
        font-family: Arial, sans-serif;
        text-align: left;
    `;

    const modalStyle = document.createElement('style');
    modalStyle.textContent = `
    .tm-modal-content {
        font-size: 14px;
        color: #333;
        line-height: 1.2;
        font-family: Arial, sans-serif;
    }
    .tm-modal-content p {
        margin: 0 0 0.6em 0;
    }
    .tm-modal-content h2 {
        color: #2F75B5;
        margin: 0;
        padding: 0;
    }
    .tm-modal-content h3 {
        margin-top: 10px;
        color: #2F75B5;
    }
    .tm-modal-content b {
        color: #2F75B5;
    }
    .tm-modal-content small {
        color: grey;
    }
    .tm-modal-content hr {
        border: none;
        border-top: 1px solid #2F75B5;
        margin: 10px 0;
    }
    .tm-modal-footer {
        text-align: right;
        margin-top: 12px;
    }
    .tm-modal-footer button {
        padding: 6px 12px;
        background-color: #B4C7E7;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-family: inherit;
    }
    .tm-modal-footer button {
        padding: 6px 16px;
        background-color: #2F75B5;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-family: inherit;
        font-weight: bold;
        font-size: 12px;
        transition: background-color 0.2s ease;
    }
    .tm-modal-footer button:hover {
        background-color: #1c5a91;
    }
    `;
    document.head.appendChild(modalStyle);

    modal.innerHTML = `
    <div class="tm-modal-content">
        <h2>Text Insert Short-Keys Automation <small>(Firefox/Chrome)</small></h2>
        <p>Version ` + VERSION + ` <small>(updated Jul 12, 2025)</small> for Tampermonkey extension</p>
        <hr>
        <p>Copyright (c) 2025 <a href="mailto:dmpintal@yahoo.com?subject=Contact from TISK $1.0.4 automation">Dawid Pintal</a>, All Rights Reserved<br>
        Basic concept, idea and beta-testing: Arnaud Guillon<br>
        Programming and UI/UX solutions: Dawid Pintal<br></p>
        <hr>
        <p><b>Automation simplifies text entry</b> for <b>Firefox</b> or <b>Chrome</b> browser with <a href="https://adons.mozilla.org/en-US/firefox/search/?q=tampermonkey" target="_blank">Tampermonkey extension</a> installed. Started at June 30, 2025 as a small experiment and grow up to great idea as a guiding browser automation for everyone looking to make writing easier.</p>
        <p>Some tools and pages do not yet work with this feature, but developing be continued as long as you support the project and the initiative. For example due to <b>Facebook Messenger’s non-standard input system</b>, auto-insertions are currently not supported yet. All other editable text fields should work as expected.</p>
        <p>This package contains a converter for scripts used by AutoHotKeys (AHK), which is a bit problematic in Windows 11 (official statement at the time of TISK first release).<br>The converter and editor has been prepared for you as an Excel workbook using VBA programming. If you would like to have similar in another way let the Author know, he will take care of it immediately (link above).</p>
        <p>Many features are in the development, and I hope that you will join my group of users with a small financial support, which will allow the continuation of this as well as many other projects that will be published soon. You can always catch the author on Messenger after early email contact.</p>
        <p><b>UI/UX</b> <em>(User Interface/User Experience)</em> are most important to me and automations are created to make your life easier and not to mess with the programming. Many websites have lack of it so let's improve it!</>
    </div>
    <div class="tm-modal-footer"><button id="modal-close">Close</button></div>
    `;

    document.body.appendChild(modal);
    document.getElementById("modal-close")?.addEventListener('click', () => { modal.style.display = 'none'; });
    infoButton.addEventListener('click', () => { modal.style.display = 'block'; });

    // Build dropdown options with max 40 characters sequences length
    const allOptions = [];
    for (const key in shortcuts) {
        const opt = document.createElement('option');
        opt.value = shortcuts[key];
        opt.textContent = `${key} → ${shortcuts[key].slice(0, 40)}...`;
        allOptions.push(opt);
    }

    function updateMenuFilter(value) {
        menu.innerHTML = '';
        menu.appendChild(defaultOption);
        const val = value.toLowerCase();
        for (const opt of allOptions) {
            if (opt.textContent.toLowerCase().includes(val)) {
                menu.appendChild(opt);
            }
        }
        menu.selectedIndex = 0;
    }

    filterInput.addEventListener('input', () => updateMenuFilter(filterInput.value));

    menu.addEventListener('change', async function () {
        const textToInsert = await applyDynamicTags(this.value);
        const active = lastFocusedElement;
        if (active && (active.tagName === "TEXTAREA" || active.tagName === "INPUT")) {
            const start = active.selectionStart;
            const end = active.selectionEnd;
            const oldText = active.value;
            active.value = oldText.slice(0, start) + textToInsert + oldText.slice(end);
            const newPos = start + textToInsert.length;
            active.setSelectionRange(newPos, newPos);
            active.focus();
        }
        this.selectedIndex = 0;
    });

    updateMenuFilter("");
    updatePosition();
})();